//--------------------------------------------------------------------------------
// Auto-generated by LiteX (c213c4274) on 2025-02-27 00:37:18
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// CSR Includes.
//--------------------------------------------------------------------------------

#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */

#ifndef CSR_BASE
#define CSR_BASE 0xf0000000L
#endif /* ! CSR_BASE */

//--------------------------------------------------------------------------------
// CSR Registers/Fields Definition.
//--------------------------------------------------------------------------------

/* CTRL Registers */
#define CSR_CTRL_BASE (CSR_BASE + 0x0L)
#define CSR_CTRL_RESET_ADDR (CSR_BASE + 0x0L)
#define CSR_CTRL_RESET_SIZE 1
#define CSR_CTRL_SCRATCH_ADDR (CSR_BASE + 0x4L)
#define CSR_CTRL_SCRATCH_SIZE 1
#define CSR_CTRL_BUS_ERRORS_ADDR (CSR_BASE + 0x8L)
#define CSR_CTRL_BUS_ERRORS_SIZE 1

/* CTRL Fields */
#define CSR_CTRL_RESET_SOC_RST_OFFSET 0
#define CSR_CTRL_RESET_SOC_RST_SIZE 1
#define CSR_CTRL_RESET_CPU_RST_OFFSET 1
#define CSR_CTRL_RESET_CPU_RST_SIZE 1

/* FLASH Registers */
#define CSR_FLASH_BASE (CSR_BASE + 0x800L)
#define CSR_FLASH_TX_ADDR (CSR_BASE + 0x800L)
#define CSR_FLASH_TX_SIZE 1
#define CSR_FLASH_RX_ADDR (CSR_BASE + 0x804L)
#define CSR_FLASH_RX_SIZE 1
#define CSR_FLASH_BUSY_ADDR (CSR_BASE + 0x808L)
#define CSR_FLASH_BUSY_SIZE 1
#define CSR_FLASH_CONTROL_ADDR (CSR_BASE + 0x80cL)
#define CSR_FLASH_CONTROL_SIZE 1
#define CSR_FLASH_SS_N_ADDR (CSR_BASE + 0x810L)
#define CSR_FLASH_SS_N_SIZE 1

/* FLASH Fields */
#define CSR_FLASH_CONTROL_ENABLE_OFFSET 0
#define CSR_FLASH_CONTROL_ENABLE_SIZE 1
#define CSR_FLASH_CONTROL_CPOL_OFFSET 1
#define CSR_FLASH_CONTROL_CPOL_SIZE 1
#define CSR_FLASH_CONTROL_CPHA_OFFSET 2
#define CSR_FLASH_CONTROL_CPHA_SIZE 1

/* GATEMATE_DEBUG_3 Registers */
#define CSR_GATEMATE_DEBUG_3_BASE (CSR_BASE + 0x1000L)
#define CSR_GATEMATE_DEBUG_3_OE_ADDR (CSR_BASE + 0x1000L)
#define CSR_GATEMATE_DEBUG_3_OE_SIZE 1
#define CSR_GATEMATE_DEBUG_3_IN_ADDR (CSR_BASE + 0x1004L)
#define CSR_GATEMATE_DEBUG_3_IN_SIZE 1
#define CSR_GATEMATE_DEBUG_3_OUT_ADDR (CSR_BASE + 0x1008L)
#define CSR_GATEMATE_DEBUG_3_OUT_SIZE 1

/* GATEMATE_DEBUG_3 Fields */

/* GATEMATE_DEBUG_4 Registers */
#define CSR_GATEMATE_DEBUG_4_BASE (CSR_BASE + 0x1800L)
#define CSR_GATEMATE_DEBUG_4_OE_ADDR (CSR_BASE + 0x1800L)
#define CSR_GATEMATE_DEBUG_4_OE_SIZE 1
#define CSR_GATEMATE_DEBUG_4_IN_ADDR (CSR_BASE + 0x1804L)
#define CSR_GATEMATE_DEBUG_4_IN_SIZE 1
#define CSR_GATEMATE_DEBUG_4_OUT_ADDR (CSR_BASE + 0x1808L)
#define CSR_GATEMATE_DEBUG_4_OUT_SIZE 1

/* GATEMATE_DEBUG_4 Fields */

/* GATEMATE_DEBUG_5 Registers */
#define CSR_GATEMATE_DEBUG_5_BASE (CSR_BASE + 0x2000L)
#define CSR_GATEMATE_DEBUG_5_OE_ADDR (CSR_BASE + 0x2000L)
#define CSR_GATEMATE_DEBUG_5_OE_SIZE 1
#define CSR_GATEMATE_DEBUG_5_IN_ADDR (CSR_BASE + 0x2004L)
#define CSR_GATEMATE_DEBUG_5_IN_SIZE 1
#define CSR_GATEMATE_DEBUG_5_OUT_ADDR (CSR_BASE + 0x2008L)
#define CSR_GATEMATE_DEBUG_5_OUT_SIZE 1

/* GATEMATE_DEBUG_5 Fields */

/* HYPERRAM Registers */
#define CSR_HYPERRAM_BASE (CSR_BASE + 0x2800L)
#define CSR_HYPERRAM_CONFIG_ADDR (CSR_BASE + 0x2800L)
#define CSR_HYPERRAM_CONFIG_SIZE 1
#define CSR_HYPERRAM_STATUS_ADDR (CSR_BASE + 0x2804L)
#define CSR_HYPERRAM_STATUS_SIZE 1
#define CSR_HYPERRAM_REG_CONTROL_ADDR (CSR_BASE + 0x2808L)
#define CSR_HYPERRAM_REG_CONTROL_SIZE 1
#define CSR_HYPERRAM_REG_STATUS_ADDR (CSR_BASE + 0x280cL)
#define CSR_HYPERRAM_REG_STATUS_SIZE 1
#define CSR_HYPERRAM_REG_WDATA_ADDR (CSR_BASE + 0x2810L)
#define CSR_HYPERRAM_REG_WDATA_SIZE 1
#define CSR_HYPERRAM_REG_RDATA_ADDR (CSR_BASE + 0x2814L)
#define CSR_HYPERRAM_REG_RDATA_SIZE 1

/* HYPERRAM Fields */
#define CSR_HYPERRAM_CONFIG_RST_OFFSET 0
#define CSR_HYPERRAM_CONFIG_RST_SIZE 1
#define CSR_HYPERRAM_CONFIG_LATENCY_OFFSET 8
#define CSR_HYPERRAM_CONFIG_LATENCY_SIZE 8
#define CSR_HYPERRAM_STATUS_LATENCY_MODE_OFFSET 0
#define CSR_HYPERRAM_STATUS_LATENCY_MODE_SIZE 1
#define CSR_HYPERRAM_STATUS_CLK_RATIO_OFFSET 1
#define CSR_HYPERRAM_STATUS_CLK_RATIO_SIZE 4
#define CSR_HYPERRAM_REG_CONTROL_WRITE_OFFSET 0
#define CSR_HYPERRAM_REG_CONTROL_WRITE_SIZE 1
#define CSR_HYPERRAM_REG_CONTROL_READ_OFFSET 1
#define CSR_HYPERRAM_REG_CONTROL_READ_SIZE 1
#define CSR_HYPERRAM_REG_CONTROL_ADDR_OFFSET 8
#define CSR_HYPERRAM_REG_CONTROL_ADDR_SIZE 2
#define CSR_HYPERRAM_REG_STATUS_DONE_OFFSET 0
#define CSR_HYPERRAM_REG_STATUS_DONE_SIZE 1

/* I2C0 Registers */
#define CSR_I2C0_BASE (CSR_BASE + 0x3000L)
#define CSR_I2C0_W_ADDR (CSR_BASE + 0x3000L)
#define CSR_I2C0_W_SIZE 1
#define CSR_I2C0_R_ADDR (CSR_BASE + 0x3004L)
#define CSR_I2C0_R_SIZE 1

/* I2C0 Fields */
#define CSR_I2C0_W_SCL_OFFSET 0
#define CSR_I2C0_W_SCL_SIZE 1
#define CSR_I2C0_W_OE_OFFSET 1
#define CSR_I2C0_W_OE_SIZE 1
#define CSR_I2C0_W_SDA_OFFSET 2
#define CSR_I2C0_W_SDA_SIZE 1
#define CSR_I2C0_R_SDA_OFFSET 0
#define CSR_I2C0_R_SDA_SIZE 1

/* I2C1 Registers */
#define CSR_I2C1_BASE (CSR_BASE + 0x3800L)
#define CSR_I2C1_W_ADDR (CSR_BASE + 0x3800L)
#define CSR_I2C1_W_SIZE 1
#define CSR_I2C1_R_ADDR (CSR_BASE + 0x3804L)
#define CSR_I2C1_R_SIZE 1

/* I2C1 Fields */
#define CSR_I2C1_W_SCL_OFFSET 0
#define CSR_I2C1_W_SCL_SIZE 1
#define CSR_I2C1_W_OE_OFFSET 1
#define CSR_I2C1_W_OE_SIZE 1
#define CSR_I2C1_W_SDA_OFFSET 2
#define CSR_I2C1_W_SDA_SIZE 1
#define CSR_I2C1_R_SDA_OFFSET 0
#define CSR_I2C1_R_SDA_SIZE 1

/* ICE40 Registers */
#define CSR_ICE40_BASE (CSR_BASE + 0x4000L)
#define CSR_ICE40_TX_ADDR (CSR_BASE + 0x4000L)
#define CSR_ICE40_TX_SIZE 1
#define CSR_ICE40_RX_ADDR (CSR_BASE + 0x4004L)
#define CSR_ICE40_RX_SIZE 1
#define CSR_ICE40_BUSY_ADDR (CSR_BASE + 0x4008L)
#define CSR_ICE40_BUSY_SIZE 1
#define CSR_ICE40_CONTROL_ADDR (CSR_BASE + 0x400cL)
#define CSR_ICE40_CONTROL_SIZE 1
#define CSR_ICE40_SS_N_ADDR (CSR_BASE + 0x4010L)
#define CSR_ICE40_SS_N_SIZE 1

/* ICE40 Fields */
#define CSR_ICE40_CONTROL_ENABLE_OFFSET 0
#define CSR_ICE40_CONTROL_ENABLE_SIZE 1
#define CSR_ICE40_CONTROL_CPOL_OFFSET 1
#define CSR_ICE40_CONTROL_CPOL_SIZE 1
#define CSR_ICE40_CONTROL_CPHA_OFFSET 2
#define CSR_ICE40_CONTROL_CPHA_SIZE 1

/* ICE40_CD Registers */
#define CSR_ICE40_CD_BASE (CSR_BASE + 0x4800L)
#define CSR_ICE40_CD_IN_ADDR (CSR_BASE + 0x4800L)
#define CSR_ICE40_CD_IN_SIZE 1

/* ICE40_CD Fields */

/* ICE40_CORE_EN Registers */
#define CSR_ICE40_CORE_EN_BASE (CSR_BASE + 0x5000L)
#define CSR_ICE40_CORE_EN_OUT_ADDR (CSR_BASE + 0x5000L)
#define CSR_ICE40_CORE_EN_OUT_SIZE 1

/* ICE40_CORE_EN Fields */

/* ICE40_CP Registers */
#define CSR_ICE40_CP_BASE (CSR_BASE + 0x5800L)
#define CSR_ICE40_CP_OE_ADDR (CSR_BASE + 0x5800L)
#define CSR_ICE40_CP_OE_SIZE 1
#define CSR_ICE40_CP_IN_ADDR (CSR_BASE + 0x5804L)
#define CSR_ICE40_CP_IN_SIZE 1
#define CSR_ICE40_CP_OUT_ADDR (CSR_BASE + 0x5808L)
#define CSR_ICE40_CP_OUT_SIZE 1

/* ICE40_CP Fields */

/* ICE40_IO_VCORE_0 Registers */
#define CSR_ICE40_IO_VCORE_0_BASE (CSR_BASE + 0x6000L)
#define CSR_ICE40_IO_VCORE_0_OE_ADDR (CSR_BASE + 0x6000L)
#define CSR_ICE40_IO_VCORE_0_OE_SIZE 1
#define CSR_ICE40_IO_VCORE_0_IN_ADDR (CSR_BASE + 0x6004L)
#define CSR_ICE40_IO_VCORE_0_IN_SIZE 1
#define CSR_ICE40_IO_VCORE_0_OUT_ADDR (CSR_BASE + 0x6008L)
#define CSR_ICE40_IO_VCORE_0_OUT_SIZE 1

/* ICE40_IO_VCORE_0 Fields */

/* ICE40_IO_VCORE_1 Registers */
#define CSR_ICE40_IO_VCORE_1_BASE (CSR_BASE + 0x6800L)
#define CSR_ICE40_IO_VCORE_1_OE_ADDR (CSR_BASE + 0x6800L)
#define CSR_ICE40_IO_VCORE_1_OE_SIZE 1
#define CSR_ICE40_IO_VCORE_1_IN_ADDR (CSR_BASE + 0x6804L)
#define CSR_ICE40_IO_VCORE_1_IN_SIZE 1
#define CSR_ICE40_IO_VCORE_1_OUT_ADDR (CSR_BASE + 0x6808L)
#define CSR_ICE40_IO_VCORE_1_OUT_SIZE 1

/* ICE40_IO_VCORE_1 Fields */

/* ICE40_IO_VCORE_2 Registers */
#define CSR_ICE40_IO_VCORE_2_BASE (CSR_BASE + 0x7000L)
#define CSR_ICE40_IO_VCORE_2_OE_ADDR (CSR_BASE + 0x7000L)
#define CSR_ICE40_IO_VCORE_2_OE_SIZE 1
#define CSR_ICE40_IO_VCORE_2_IN_ADDR (CSR_BASE + 0x7004L)
#define CSR_ICE40_IO_VCORE_2_IN_SIZE 1
#define CSR_ICE40_IO_VCORE_2_OUT_ADDR (CSR_BASE + 0x7008L)
#define CSR_ICE40_IO_VCORE_2_OUT_SIZE 1

/* ICE40_IO_VCORE_2 Fields */

/* ICE40_IO_VCORE_4 Registers */
#define CSR_ICE40_IO_VCORE_4_BASE (CSR_BASE + 0x7800L)
#define CSR_ICE40_IO_VCORE_4_OE_ADDR (CSR_BASE + 0x7800L)
#define CSR_ICE40_IO_VCORE_4_OE_SIZE 1
#define CSR_ICE40_IO_VCORE_4_IN_ADDR (CSR_BASE + 0x7804L)
#define CSR_ICE40_IO_VCORE_4_IN_SIZE 1
#define CSR_ICE40_IO_VCORE_4_OUT_ADDR (CSR_BASE + 0x7808L)
#define CSR_ICE40_IO_VCORE_4_OUT_SIZE 1

/* ICE40_IO_VCORE_4 Fields */

/* ICE40_IO_VIO_0 Registers */
#define CSR_ICE40_IO_VIO_0_BASE (CSR_BASE + 0x8000L)
#define CSR_ICE40_IO_VIO_0_OE_ADDR (CSR_BASE + 0x8000L)
#define CSR_ICE40_IO_VIO_0_OE_SIZE 1
#define CSR_ICE40_IO_VIO_0_IN_ADDR (CSR_BASE + 0x8004L)
#define CSR_ICE40_IO_VIO_0_IN_SIZE 1
#define CSR_ICE40_IO_VIO_0_OUT_ADDR (CSR_BASE + 0x8008L)
#define CSR_ICE40_IO_VIO_0_OUT_SIZE 1

/* ICE40_IO_VIO_0 Fields */

/* ICE40_IO_VIO_1 Registers */
#define CSR_ICE40_IO_VIO_1_BASE (CSR_BASE + 0x8800L)
#define CSR_ICE40_IO_VIO_1_OE_ADDR (CSR_BASE + 0x8800L)
#define CSR_ICE40_IO_VIO_1_OE_SIZE 1
#define CSR_ICE40_IO_VIO_1_IN_ADDR (CSR_BASE + 0x8804L)
#define CSR_ICE40_IO_VIO_1_IN_SIZE 1
#define CSR_ICE40_IO_VIO_1_OUT_ADDR (CSR_BASE + 0x8808L)
#define CSR_ICE40_IO_VIO_1_OUT_SIZE 1

/* ICE40_IO_VIO_1 Fields */

/* ICE40_IO_VIO_2 Registers */
#define CSR_ICE40_IO_VIO_2_BASE (CSR_BASE + 0x9000L)
#define CSR_ICE40_IO_VIO_2_OE_ADDR (CSR_BASE + 0x9000L)
#define CSR_ICE40_IO_VIO_2_OE_SIZE 1
#define CSR_ICE40_IO_VIO_2_IN_ADDR (CSR_BASE + 0x9004L)
#define CSR_ICE40_IO_VIO_2_IN_SIZE 1
#define CSR_ICE40_IO_VIO_2_OUT_ADDR (CSR_BASE + 0x9008L)
#define CSR_ICE40_IO_VIO_2_OUT_SIZE 1

/* ICE40_IO_VIO_2 Fields */

/* ICE40_IO_VIO_3 Registers */
#define CSR_ICE40_IO_VIO_3_BASE (CSR_BASE + 0x9800L)
#define CSR_ICE40_IO_VIO_3_OE_ADDR (CSR_BASE + 0x9800L)
#define CSR_ICE40_IO_VIO_3_OE_SIZE 1
#define CSR_ICE40_IO_VIO_3_IN_ADDR (CSR_BASE + 0x9804L)
#define CSR_ICE40_IO_VIO_3_IN_SIZE 1
#define CSR_ICE40_IO_VIO_3_OUT_ADDR (CSR_BASE + 0x9808L)
#define CSR_ICE40_IO_VIO_3_OUT_SIZE 1

/* ICE40_IO_VIO_3 Fields */

/* ICE40_IO_VIO_4 Registers */
#define CSR_ICE40_IO_VIO_4_BASE (CSR_BASE + 0xa000L)
#define CSR_ICE40_IO_VIO_4_OE_ADDR (CSR_BASE + 0xa000L)
#define CSR_ICE40_IO_VIO_4_OE_SIZE 1
#define CSR_ICE40_IO_VIO_4_IN_ADDR (CSR_BASE + 0xa004L)
#define CSR_ICE40_IO_VIO_4_IN_SIZE 1
#define CSR_ICE40_IO_VIO_4_OUT_ADDR (CSR_BASE + 0xa008L)
#define CSR_ICE40_IO_VIO_4_OUT_SIZE 1

/* ICE40_IO_VIO_4 Fields */

/* ICE40_IO_VIO_5 Registers */
#define CSR_ICE40_IO_VIO_5_BASE (CSR_BASE + 0xa800L)
#define CSR_ICE40_IO_VIO_5_OE_ADDR (CSR_BASE + 0xa800L)
#define CSR_ICE40_IO_VIO_5_OE_SIZE 1
#define CSR_ICE40_IO_VIO_5_IN_ADDR (CSR_BASE + 0xa804L)
#define CSR_ICE40_IO_VIO_5_IN_SIZE 1
#define CSR_ICE40_IO_VIO_5_OUT_ADDR (CSR_BASE + 0xa808L)
#define CSR_ICE40_IO_VIO_5_OUT_SIZE 1

/* ICE40_IO_VIO_5 Fields */

/* ICE40_OSC_EN Registers */
#define CSR_ICE40_OSC_EN_BASE (CSR_BASE + 0xb000L)
#define CSR_ICE40_OSC_EN_OUT_ADDR (CSR_BASE + 0xb000L)
#define CSR_ICE40_OSC_EN_OUT_SIZE 1

/* ICE40_OSC_EN Fields */

/* ICE40_POWER_FAULD Registers */
#define CSR_ICE40_POWER_FAULD_BASE (CSR_BASE + 0xb800L)
#define CSR_ICE40_POWER_FAULD_IN_ADDR (CSR_BASE + 0xb800L)
#define CSR_ICE40_POWER_FAULD_IN_SIZE 1

/* ICE40_POWER_FAULD Fields */

/* ICE40_VIO_EN Registers */
#define CSR_ICE40_VIO_EN_BASE (CSR_BASE + 0xc000L)
#define CSR_ICE40_VIO_EN_OUT_ADDR (CSR_BASE + 0xc000L)
#define CSR_ICE40_VIO_EN_OUT_SIZE 1

/* ICE40_VIO_EN Fields */

/* IDENTIFIER_MEM Registers */
#define CSR_IDENTIFIER_MEM_BASE (CSR_BASE + 0xc800L)

/* IDENTIFIER_MEM Fields */

/* LEDS Registers */
#define CSR_LEDS_BASE (CSR_BASE + 0xd000L)
#define CSR_LEDS_OUT_ADDR (CSR_BASE + 0xd000L)
#define CSR_LEDS_OUT_SIZE 1

/* LEDS Fields */

/* TIMER0 Registers */
#define CSR_TIMER0_BASE (CSR_BASE + 0xd800L)
#define CSR_TIMER0_LOAD_ADDR (CSR_BASE + 0xd800L)
#define CSR_TIMER0_LOAD_SIZE 1
#define CSR_TIMER0_RELOAD_ADDR (CSR_BASE + 0xd804L)
#define CSR_TIMER0_RELOAD_SIZE 1
#define CSR_TIMER0_EN_ADDR (CSR_BASE + 0xd808L)
#define CSR_TIMER0_EN_SIZE 1
#define CSR_TIMER0_UPDATE_VALUE_ADDR (CSR_BASE + 0xd80cL)
#define CSR_TIMER0_UPDATE_VALUE_SIZE 1
#define CSR_TIMER0_VALUE_ADDR (CSR_BASE + 0xd810L)
#define CSR_TIMER0_VALUE_SIZE 1
#define CSR_TIMER0_EV_STATUS_ADDR (CSR_BASE + 0xd814L)
#define CSR_TIMER0_EV_STATUS_SIZE 1
#define CSR_TIMER0_EV_PENDING_ADDR (CSR_BASE + 0xd818L)
#define CSR_TIMER0_EV_PENDING_SIZE 1
#define CSR_TIMER0_EV_ENABLE_ADDR (CSR_BASE + 0xd81cL)
#define CSR_TIMER0_EV_ENABLE_SIZE 1

/* TIMER0 Fields */
#define CSR_TIMER0_EV_STATUS_ZERO_OFFSET 0
#define CSR_TIMER0_EV_STATUS_ZERO_SIZE 1
#define CSR_TIMER0_EV_PENDING_ZERO_OFFSET 0
#define CSR_TIMER0_EV_PENDING_ZERO_SIZE 1
#define CSR_TIMER0_EV_ENABLE_ZERO_OFFSET 0
#define CSR_TIMER0_EV_ENABLE_ZERO_SIZE 1

/* TIMER1 Registers */
#define CSR_TIMER1_BASE (CSR_BASE + 0xe000L)
#define CSR_TIMER1_LOAD_ADDR (CSR_BASE + 0xe000L)
#define CSR_TIMER1_LOAD_SIZE 1
#define CSR_TIMER1_RELOAD_ADDR (CSR_BASE + 0xe004L)
#define CSR_TIMER1_RELOAD_SIZE 1
#define CSR_TIMER1_EN_ADDR (CSR_BASE + 0xe008L)
#define CSR_TIMER1_EN_SIZE 1
#define CSR_TIMER1_UPDATE_VALUE_ADDR (CSR_BASE + 0xe00cL)
#define CSR_TIMER1_UPDATE_VALUE_SIZE 1
#define CSR_TIMER1_VALUE_ADDR (CSR_BASE + 0xe010L)
#define CSR_TIMER1_VALUE_SIZE 1
#define CSR_TIMER1_EV_STATUS_ADDR (CSR_BASE + 0xe014L)
#define CSR_TIMER1_EV_STATUS_SIZE 1
#define CSR_TIMER1_EV_PENDING_ADDR (CSR_BASE + 0xe018L)
#define CSR_TIMER1_EV_PENDING_SIZE 1
#define CSR_TIMER1_EV_ENABLE_ADDR (CSR_BASE + 0xe01cL)
#define CSR_TIMER1_EV_ENABLE_SIZE 1

/* TIMER1 Fields */
#define CSR_TIMER1_EV_STATUS_ZERO_OFFSET 0
#define CSR_TIMER1_EV_STATUS_ZERO_SIZE 1
#define CSR_TIMER1_EV_PENDING_ZERO_OFFSET 0
#define CSR_TIMER1_EV_PENDING_ZERO_SIZE 1
#define CSR_TIMER1_EV_ENABLE_ZERO_OFFSET 0
#define CSR_TIMER1_EV_ENABLE_ZERO_SIZE 1

/* UART Registers */
#define CSR_UART_BASE (CSR_BASE + 0xe800L)
#define CSR_UART_RXTX_ADDR (CSR_BASE + 0xe800L)
#define CSR_UART_RXTX_SIZE 1
#define CSR_UART_TXFULL_ADDR (CSR_BASE + 0xe804L)
#define CSR_UART_TXFULL_SIZE 1
#define CSR_UART_RXEMPTY_ADDR (CSR_BASE + 0xe808L)
#define CSR_UART_RXEMPTY_SIZE 1
#define CSR_UART_EV_STATUS_ADDR (CSR_BASE + 0xe80cL)
#define CSR_UART_EV_STATUS_SIZE 1
#define CSR_UART_EV_PENDING_ADDR (CSR_BASE + 0xe810L)
#define CSR_UART_EV_PENDING_SIZE 1
#define CSR_UART_EV_ENABLE_ADDR (CSR_BASE + 0xe814L)
#define CSR_UART_EV_ENABLE_SIZE 1
#define CSR_UART_TXEMPTY_ADDR (CSR_BASE + 0xe818L)
#define CSR_UART_TXEMPTY_SIZE 1
#define CSR_UART_RXFULL_ADDR (CSR_BASE + 0xe81cL)
#define CSR_UART_RXFULL_SIZE 1

/* UART Fields */
#define CSR_UART_EV_STATUS_TX_OFFSET 0
#define CSR_UART_EV_STATUS_TX_SIZE 1
#define CSR_UART_EV_STATUS_RX_OFFSET 1
#define CSR_UART_EV_STATUS_RX_SIZE 1
#define CSR_UART_EV_PENDING_TX_OFFSET 0
#define CSR_UART_EV_PENDING_TX_SIZE 1
#define CSR_UART_EV_PENDING_RX_OFFSET 1
#define CSR_UART_EV_PENDING_RX_SIZE 1
#define CSR_UART_EV_ENABLE_TX_OFFSET 0
#define CSR_UART_EV_ENABLE_TX_SIZE 1
#define CSR_UART_EV_ENABLE_RX_OFFSET 1
#define CSR_UART_EV_ENABLE_RX_SIZE 1

/* UART_ICE40 Registers */
#define CSR_UART_ICE40_BASE (CSR_BASE + 0xf000L)
#define CSR_UART_ICE40_TX_DATA_ADDR (CSR_BASE + 0xf000L)
#define CSR_UART_ICE40_TX_DATA_SIZE 1
#define CSR_UART_ICE40_RX_DATA_ADDR (CSR_BASE + 0xf004L)
#define CSR_UART_ICE40_RX_DATA_SIZE 1
#define CSR_UART_ICE40_CONTROL_ADDR (CSR_BASE + 0xf008L)
#define CSR_UART_ICE40_CONTROL_SIZE 1
#define CSR_UART_ICE40_STATUS_ADDR (CSR_BASE + 0xf00cL)
#define CSR_UART_ICE40_STATUS_SIZE 1
#define CSR_UART_ICE40_EV_STATUS_ADDR (CSR_BASE + 0xf010L)
#define CSR_UART_ICE40_EV_STATUS_SIZE 1
#define CSR_UART_ICE40_EV_PENDING_ADDR (CSR_BASE + 0xf014L)
#define CSR_UART_ICE40_EV_PENDING_SIZE 1
#define CSR_UART_ICE40_EV_ENABLE_ADDR (CSR_BASE + 0xf018L)
#define CSR_UART_ICE40_EV_ENABLE_SIZE 1

/* UART_ICE40 Fields */
#define CSR_UART_ICE40_CONTROL_DIN_VLD_OFFSET 0
#define CSR_UART_ICE40_CONTROL_DIN_VLD_SIZE 1
#define CSR_UART_ICE40_STATUS_DIN_RDY_OFFSET 0
#define CSR_UART_ICE40_STATUS_DIN_RDY_SIZE 1
#define CSR_UART_ICE40_STATUS_DOUT_VLD_OFFSET 1
#define CSR_UART_ICE40_STATUS_DOUT_VLD_SIZE 1
#define CSR_UART_ICE40_STATUS_FE_OFFSET 2
#define CSR_UART_ICE40_STATUS_FE_SIZE 1
#define CSR_UART_ICE40_STATUS_PE_OFFSET 3
#define CSR_UART_ICE40_STATUS_PE_SIZE 1
#define CSR_UART_ICE40_EV_STATUS_RX_OFFSET 0
#define CSR_UART_ICE40_EV_STATUS_RX_SIZE 1
#define CSR_UART_ICE40_EV_PENDING_RX_OFFSET 0
#define CSR_UART_ICE40_EV_PENDING_RX_SIZE 1
#define CSR_UART_ICE40_EV_ENABLE_RX_OFFSET 0
#define CSR_UART_ICE40_EV_ENABLE_RX_SIZE 1

/* UART_LOGGING Registers */
#define CSR_UART_LOGGING_BASE (CSR_BASE + 0xf800L)
#define CSR_UART_LOGGING_TX_DATA_ADDR (CSR_BASE + 0xf800L)
#define CSR_UART_LOGGING_TX_DATA_SIZE 1
#define CSR_UART_LOGGING_RX_DATA_ADDR (CSR_BASE + 0xf804L)
#define CSR_UART_LOGGING_RX_DATA_SIZE 1
#define CSR_UART_LOGGING_CONTROL_ADDR (CSR_BASE + 0xf808L)
#define CSR_UART_LOGGING_CONTROL_SIZE 1
#define CSR_UART_LOGGING_STATUS_ADDR (CSR_BASE + 0xf80cL)
#define CSR_UART_LOGGING_STATUS_SIZE 1
#define CSR_UART_LOGGING_EV_STATUS_ADDR (CSR_BASE + 0xf810L)
#define CSR_UART_LOGGING_EV_STATUS_SIZE 1
#define CSR_UART_LOGGING_EV_PENDING_ADDR (CSR_BASE + 0xf814L)
#define CSR_UART_LOGGING_EV_PENDING_SIZE 1
#define CSR_UART_LOGGING_EV_ENABLE_ADDR (CSR_BASE + 0xf818L)
#define CSR_UART_LOGGING_EV_ENABLE_SIZE 1

/* UART_LOGGING Fields */
#define CSR_UART_LOGGING_CONTROL_DIN_VLD_OFFSET 0
#define CSR_UART_LOGGING_CONTROL_DIN_VLD_SIZE 1
#define CSR_UART_LOGGING_STATUS_DIN_RDY_OFFSET 0
#define CSR_UART_LOGGING_STATUS_DIN_RDY_SIZE 1
#define CSR_UART_LOGGING_STATUS_DOUT_VLD_OFFSET 1
#define CSR_UART_LOGGING_STATUS_DOUT_VLD_SIZE 1
#define CSR_UART_LOGGING_STATUS_FE_OFFSET 2
#define CSR_UART_LOGGING_STATUS_FE_SIZE 1
#define CSR_UART_LOGGING_STATUS_PE_OFFSET 3
#define CSR_UART_LOGGING_STATUS_PE_SIZE 1
#define CSR_UART_LOGGING_EV_STATUS_RX_OFFSET 0
#define CSR_UART_LOGGING_EV_STATUS_RX_SIZE 1
#define CSR_UART_LOGGING_EV_PENDING_RX_OFFSET 0
#define CSR_UART_LOGGING_EV_PENDING_RX_SIZE 1
#define CSR_UART_LOGGING_EV_ENABLE_RX_OFFSET 0
#define CSR_UART_LOGGING_EV_ENABLE_RX_SIZE 1

//--------------------------------------------------------------------------------
// CSR Registers Access Functions.
//--------------------------------------------------------------------------------

#ifndef LITEX_CSR_ACCESS_FUNCTIONS
#define LITEX_CSR_ACCESS_FUNCTIONS 1
#endif

#if LITEX_CSR_ACCESS_FUNCTIONS

/* CTRL Access Functions */
static inline uint32_t ctrl_reset_read(void) {
	return csr_read_simple((CSR_BASE + 0x0L));
}
static inline void ctrl_reset_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x0L));
}
static inline uint32_t ctrl_scratch_read(void) {
	return csr_read_simple((CSR_BASE + 0x4L));
}
static inline void ctrl_scratch_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4L));
}
static inline uint32_t ctrl_bus_errors_read(void) {
	return csr_read_simple((CSR_BASE + 0x8L));
}

/* FLASH Access Functions */
static inline uint32_t flash_tx_read(void) {
	return csr_read_simple((CSR_BASE + 0x800L));
}
static inline void flash_tx_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x800L));
}
static inline uint32_t flash_rx_read(void) {
	return csr_read_simple((CSR_BASE + 0x804L));
}
static inline uint32_t flash_busy_read(void) {
	return csr_read_simple((CSR_BASE + 0x808L));
}
static inline uint32_t flash_control_read(void) {
	return csr_read_simple((CSR_BASE + 0x80cL));
}
static inline void flash_control_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x80cL));
}
static inline uint32_t flash_ss_n_read(void) {
	return csr_read_simple((CSR_BASE + 0x810L));
}
static inline void flash_ss_n_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x810L));
}

/* GATEMATE_DEBUG_3 Access Functions */
static inline uint32_t gatemate_debug_3_oe_read(void) {
	return csr_read_simple((CSR_BASE + 0x1000L));
}
static inline void gatemate_debug_3_oe_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1000L));
}
static inline uint32_t gatemate_debug_3_in_read(void) {
	return csr_read_simple((CSR_BASE + 0x1004L));
}
static inline uint32_t gatemate_debug_3_out_read(void) {
	return csr_read_simple((CSR_BASE + 0x1008L));
}
static inline void gatemate_debug_3_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1008L));
}

/* GATEMATE_DEBUG_4 Access Functions */
static inline uint32_t gatemate_debug_4_oe_read(void) {
	return csr_read_simple((CSR_BASE + 0x1800L));
}
static inline void gatemate_debug_4_oe_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1800L));
}
static inline uint32_t gatemate_debug_4_in_read(void) {
	return csr_read_simple((CSR_BASE + 0x1804L));
}
static inline uint32_t gatemate_debug_4_out_read(void) {
	return csr_read_simple((CSR_BASE + 0x1808L));
}
static inline void gatemate_debug_4_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x1808L));
}

/* GATEMATE_DEBUG_5 Access Functions */
static inline uint32_t gatemate_debug_5_oe_read(void) {
	return csr_read_simple((CSR_BASE + 0x2000L));
}
static inline void gatemate_debug_5_oe_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2000L));
}
static inline uint32_t gatemate_debug_5_in_read(void) {
	return csr_read_simple((CSR_BASE + 0x2004L));
}
static inline uint32_t gatemate_debug_5_out_read(void) {
	return csr_read_simple((CSR_BASE + 0x2008L));
}
static inline void gatemate_debug_5_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2008L));
}

/* HYPERRAM Access Functions */
static inline uint32_t hyperram_config_read(void) {
	return csr_read_simple((CSR_BASE + 0x2800L));
}
static inline void hyperram_config_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2800L));
}
static inline uint32_t hyperram_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x2804L));
}
static inline uint32_t hyperram_reg_control_read(void) {
	return csr_read_simple((CSR_BASE + 0x2808L));
}
static inline void hyperram_reg_control_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2808L));
}
static inline uint32_t hyperram_reg_status_read(void) {
	return csr_read_simple((CSR_BASE + 0x280cL));
}
static inline uint32_t hyperram_reg_wdata_read(void) {
	return csr_read_simple((CSR_BASE + 0x2810L));
}
static inline void hyperram_reg_wdata_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x2810L));
}
static inline uint32_t hyperram_reg_rdata_read(void) {
	return csr_read_simple((CSR_BASE + 0x2814L));
}

/* I2C0 Access Functions */
static inline uint32_t i2c0_w_read(void) {
	return csr_read_simple((CSR_BASE + 0x3000L));
}
static inline void i2c0_w_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3000L));
}
static inline uint32_t i2c0_r_read(void) {
	return csr_read_simple((CSR_BASE + 0x3004L));
}

/* I2C1 Access Functions */
static inline uint32_t i2c1_w_read(void) {
	return csr_read_simple((CSR_BASE + 0x3800L));
}
static inline void i2c1_w_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x3800L));
}
static inline uint32_t i2c1_r_read(void) {
	return csr_read_simple((CSR_BASE + 0x3804L));
}

/* ICE40 Access Functions */
static inline uint32_t ice40_tx_read(void) {
	return csr_read_simple((CSR_BASE + 0x4000L));
}
static inline void ice40_tx_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4000L));
}
static inline uint32_t ice40_rx_read(void) {
	return csr_read_simple((CSR_BASE + 0x4004L));
}
static inline uint32_t ice40_busy_read(void) {
	return csr_read_simple((CSR_BASE + 0x4008L));
}
static inline uint32_t ice40_control_read(void) {
	return csr_read_simple((CSR_BASE + 0x400cL));
}
static inline void ice40_control_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x400cL));
}
static inline uint32_t ice40_ss_n_read(void) {
	return csr_read_simple((CSR_BASE + 0x4010L));
}
static inline void ice40_ss_n_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4010L));
}

/* ICE40_CD Access Functions */
static inline uint32_t ice40_cd_in_read(void) {
	return csr_read_simple((CSR_BASE + 0x4800L));
}

/* ICE40_CORE_EN Access Functions */
static inline uint32_t ice40_core_en_out_read(void) {
	return csr_read_simple((CSR_BASE + 0x5000L));
}
static inline void ice40_core_en_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5000L));
}

/* ICE40_CP Access Functions */
static inline uint32_t ice40_cp_oe_read(void) {
	return csr_read_simple((CSR_BASE + 0x5800L));
}
static inline void ice40_cp_oe_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5800L));
}
static inline uint32_t ice40_cp_in_read(void) {
	return csr_read_simple((CSR_BASE + 0x5804L));
}
static inline uint32_t ice40_cp_out_read(void) {
	return csr_read_simple((CSR_BASE + 0x5808L));
}
static inline void ice40_cp_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x5808L));
}

/* ICE40_IO_VCORE_0 Access Functions */
static inline uint32_t ice40_io_vcore_0_oe_read(void) {
	return csr_read_simple((CSR_BASE + 0x6000L));
}
static inline void ice40_io_vcore_0_oe_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6000L));
}
static inline uint32_t ice40_io_vcore_0_in_read(void) {
	return csr_read_simple((CSR_BASE + 0x6004L));
}
static inline uint32_t ice40_io_vcore_0_out_read(void) {
	return csr_read_simple((CSR_BASE + 0x6008L));
}
static inline void ice40_io_vcore_0_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6008L));
}

/* ICE40_IO_VCORE_1 Access Functions */
static inline uint32_t ice40_io_vcore_1_oe_read(void) {
	return csr_read_simple((CSR_BASE + 0x6800L));
}
static inline void ice40_io_vcore_1_oe_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6800L));
}
static inline uint32_t ice40_io_vcore_1_in_read(void) {
	return csr_read_simple((CSR_BASE + 0x6804L));
}
static inline uint32_t ice40_io_vcore_1_out_read(void) {
	return csr_read_simple((CSR_BASE + 0x6808L));
}
static inline void ice40_io_vcore_1_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x6808L));
}

/* ICE40_IO_VCORE_2 Access Functions */
static inline uint32_t ice40_io_vcore_2_oe_read(void) {
	return csr_read_simple((CSR_BASE + 0x7000L));
}
static inline void ice40_io_vcore_2_oe_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x7000L));
}
static inline uint32_t ice40_io_vcore_2_in_read(void) {
	return csr_read_simple((CSR_BASE + 0x7004L));
}
static inline uint32_t ice40_io_vcore_2_out_read(void) {
	return csr_read_simple((CSR_BASE + 0x7008L));
}
static inline void ice40_io_vcore_2_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x7008L));
}

/* ICE40_IO_VCORE_4 Access Functions */
static inline uint32_t ice40_io_vcore_4_oe_read(void) {
	return csr_read_simple((CSR_BASE + 0x7800L));
}
static inline void ice40_io_vcore_4_oe_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x7800L));
}
static inline uint32_t ice40_io_vcore_4_in_read(void) {
	return csr_read_simple((CSR_BASE + 0x7804L));
}
static inline uint32_t ice40_io_vcore_4_out_read(void) {
	return csr_read_simple((CSR_BASE + 0x7808L));
}
static inline void ice40_io_vcore_4_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x7808L));
}

/* ICE40_IO_VIO_0 Access Functions */
static inline uint32_t ice40_io_vio_0_oe_read(void) {
	return csr_read_simple((CSR_BASE + 0x8000L));
}
static inline void ice40_io_vio_0_oe_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8000L));
}
static inline uint32_t ice40_io_vio_0_in_read(void) {
	return csr_read_simple((CSR_BASE + 0x8004L));
}
static inline uint32_t ice40_io_vio_0_out_read(void) {
	return csr_read_simple((CSR_BASE + 0x8008L));
}
static inline void ice40_io_vio_0_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8008L));
}

/* ICE40_IO_VIO_1 Access Functions */
static inline uint32_t ice40_io_vio_1_oe_read(void) {
	return csr_read_simple((CSR_BASE + 0x8800L));
}
static inline void ice40_io_vio_1_oe_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8800L));
}
static inline uint32_t ice40_io_vio_1_in_read(void) {
	return csr_read_simple((CSR_BASE + 0x8804L));
}
static inline uint32_t ice40_io_vio_1_out_read(void) {
	return csr_read_simple((CSR_BASE + 0x8808L));
}
static inline void ice40_io_vio_1_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x8808L));
}

/* ICE40_IO_VIO_2 Access Functions */
static inline uint32_t ice40_io_vio_2_oe_read(void) {
	return csr_read_simple((CSR_BASE + 0x9000L));
}
static inline void ice40_io_vio_2_oe_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x9000L));
}
static inline uint32_t ice40_io_vio_2_in_read(void) {
	return csr_read_simple((CSR_BASE + 0x9004L));
}
static inline uint32_t ice40_io_vio_2_out_read(void) {
	return csr_read_simple((CSR_BASE + 0x9008L));
}
static inline void ice40_io_vio_2_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x9008L));
}

/* ICE40_IO_VIO_3 Access Functions */
static inline uint32_t ice40_io_vio_3_oe_read(void) {
	return csr_read_simple((CSR_BASE + 0x9800L));
}
static inline void ice40_io_vio_3_oe_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x9800L));
}
static inline uint32_t ice40_io_vio_3_in_read(void) {
	return csr_read_simple((CSR_BASE + 0x9804L));
}
static inline uint32_t ice40_io_vio_3_out_read(void) {
	return csr_read_simple((CSR_BASE + 0x9808L));
}
static inline void ice40_io_vio_3_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x9808L));
}

/* ICE40_IO_VIO_4 Access Functions */
static inline uint32_t ice40_io_vio_4_oe_read(void) {
	return csr_read_simple((CSR_BASE + 0xa000L));
}
static inline void ice40_io_vio_4_oe_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xa000L));
}
static inline uint32_t ice40_io_vio_4_in_read(void) {
	return csr_read_simple((CSR_BASE + 0xa004L));
}
static inline uint32_t ice40_io_vio_4_out_read(void) {
	return csr_read_simple((CSR_BASE + 0xa008L));
}
static inline void ice40_io_vio_4_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xa008L));
}

/* ICE40_IO_VIO_5 Access Functions */
static inline uint32_t ice40_io_vio_5_oe_read(void) {
	return csr_read_simple((CSR_BASE + 0xa800L));
}
static inline void ice40_io_vio_5_oe_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xa800L));
}
static inline uint32_t ice40_io_vio_5_in_read(void) {
	return csr_read_simple((CSR_BASE + 0xa804L));
}
static inline uint32_t ice40_io_vio_5_out_read(void) {
	return csr_read_simple((CSR_BASE + 0xa808L));
}
static inline void ice40_io_vio_5_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xa808L));
}

/* ICE40_OSC_EN Access Functions */
static inline uint32_t ice40_osc_en_out_read(void) {
	return csr_read_simple((CSR_BASE + 0xb000L));
}
static inline void ice40_osc_en_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xb000L));
}

/* ICE40_POWER_FAULD Access Functions */
static inline uint32_t ice40_power_fauld_in_read(void) {
	return csr_read_simple((CSR_BASE + 0xb800L));
}

/* ICE40_VIO_EN Access Functions */
static inline uint32_t ice40_vio_en_out_read(void) {
	return csr_read_simple((CSR_BASE + 0xc000L));
}
static inline void ice40_vio_en_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xc000L));
}

/* IDENTIFIER_MEM Access Functions */

/* LEDS Access Functions */
static inline uint32_t leds_out_read(void) {
	return csr_read_simple((CSR_BASE + 0xd000L));
}
static inline void leds_out_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xd000L));
}

/* TIMER0 Access Functions */
static inline uint32_t timer0_load_read(void) {
	return csr_read_simple((CSR_BASE + 0xd800L));
}
static inline void timer0_load_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xd800L));
}
static inline uint32_t timer0_reload_read(void) {
	return csr_read_simple((CSR_BASE + 0xd804L));
}
static inline void timer0_reload_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xd804L));
}
static inline uint32_t timer0_en_read(void) {
	return csr_read_simple((CSR_BASE + 0xd808L));
}
static inline void timer0_en_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xd808L));
}
static inline uint32_t timer0_update_value_read(void) {
	return csr_read_simple((CSR_BASE + 0xd80cL));
}
static inline void timer0_update_value_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xd80cL));
}
static inline uint32_t timer0_value_read(void) {
	return csr_read_simple((CSR_BASE + 0xd810L));
}
static inline uint32_t timer0_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0xd814L));
}
static inline uint32_t timer0_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0xd818L));
}
static inline void timer0_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xd818L));
}
static inline uint32_t timer0_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0xd81cL));
}
static inline void timer0_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xd81cL));
}

/* TIMER1 Access Functions */
static inline uint32_t timer1_load_read(void) {
	return csr_read_simple((CSR_BASE + 0xe000L));
}
static inline void timer1_load_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xe000L));
}
static inline uint32_t timer1_reload_read(void) {
	return csr_read_simple((CSR_BASE + 0xe004L));
}
static inline void timer1_reload_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xe004L));
}
static inline uint32_t timer1_en_read(void) {
	return csr_read_simple((CSR_BASE + 0xe008L));
}
static inline void timer1_en_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xe008L));
}
static inline uint32_t timer1_update_value_read(void) {
	return csr_read_simple((CSR_BASE + 0xe00cL));
}
static inline void timer1_update_value_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xe00cL));
}
static inline uint32_t timer1_value_read(void) {
	return csr_read_simple((CSR_BASE + 0xe010L));
}
static inline uint32_t timer1_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0xe014L));
}
static inline uint32_t timer1_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0xe018L));
}
static inline void timer1_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xe018L));
}
static inline uint32_t timer1_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0xe01cL));
}
static inline void timer1_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xe01cL));
}

/* UART Access Functions */
static inline uint32_t uart_rxtx_read(void) {
	return csr_read_simple((CSR_BASE + 0xe800L));
}
static inline void uart_rxtx_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xe800L));
}
static inline uint32_t uart_txfull_read(void) {
	return csr_read_simple((CSR_BASE + 0xe804L));
}
static inline uint32_t uart_rxempty_read(void) {
	return csr_read_simple((CSR_BASE + 0xe808L));
}
static inline uint32_t uart_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0xe80cL));
}
static inline uint32_t uart_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0xe810L));
}
static inline void uart_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xe810L));
}
static inline uint32_t uart_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0xe814L));
}
static inline void uart_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xe814L));
}
static inline uint32_t uart_txempty_read(void) {
	return csr_read_simple((CSR_BASE + 0xe818L));
}
static inline uint32_t uart_rxfull_read(void) {
	return csr_read_simple((CSR_BASE + 0xe81cL));
}

/* UART_ICE40 Access Functions */
static inline uint32_t uart_ice40_tx_data_read(void) {
	return csr_read_simple((CSR_BASE + 0xf000L));
}
static inline void uart_ice40_tx_data_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xf000L));
}
static inline uint32_t uart_ice40_rx_data_read(void) {
	return csr_read_simple((CSR_BASE + 0xf004L));
}
static inline uint32_t uart_ice40_control_read(void) {
	return csr_read_simple((CSR_BASE + 0xf008L));
}
static inline void uart_ice40_control_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xf008L));
}
static inline uint32_t uart_ice40_status_read(void) {
	return csr_read_simple((CSR_BASE + 0xf00cL));
}
static inline uint32_t uart_ice40_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0xf010L));
}
static inline uint32_t uart_ice40_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0xf014L));
}
static inline void uart_ice40_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xf014L));
}
static inline uint32_t uart_ice40_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0xf018L));
}
static inline void uart_ice40_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xf018L));
}

/* UART_LOGGING Access Functions */
static inline uint32_t uart_logging_tx_data_read(void) {
	return csr_read_simple((CSR_BASE + 0xf800L));
}
static inline void uart_logging_tx_data_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xf800L));
}
static inline uint32_t uart_logging_rx_data_read(void) {
	return csr_read_simple((CSR_BASE + 0xf804L));
}
static inline uint32_t uart_logging_control_read(void) {
	return csr_read_simple((CSR_BASE + 0xf808L));
}
static inline void uart_logging_control_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xf808L));
}
static inline uint32_t uart_logging_status_read(void) {
	return csr_read_simple((CSR_BASE + 0xf80cL));
}
static inline uint32_t uart_logging_ev_status_read(void) {
	return csr_read_simple((CSR_BASE + 0xf810L));
}
static inline uint32_t uart_logging_ev_pending_read(void) {
	return csr_read_simple((CSR_BASE + 0xf814L));
}
static inline void uart_logging_ev_pending_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xf814L));
}
static inline uint32_t uart_logging_ev_enable_read(void) {
	return csr_read_simple((CSR_BASE + 0xf818L));
}
static inline void uart_logging_ev_enable_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0xf818L));
}
#endif /* LITEX_CSR_ACCESS_FUNCTIONS */

#endif /* ! __GENERATED_CSR_H */
