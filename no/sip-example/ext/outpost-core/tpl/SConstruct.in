#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2018, Fabian Greif
#
# This file is part of the Simple Interface Protocols (SIP) examples.
#
# It is supplied solely for the use by TUHH and HAW Hamburg
# in the frame of the PLUTO 1 flight mission.
# Distribution outside of the project or to people with no share in the PLUTO mission requires explicit permit granted by DLR-RY-AVS
# Contact jan-gerd.mess@dlr.de when in doubt.

import os

vars = Variables('custom.py')
vars.Add(BoolVariable('coverage', 'Set to build for coverage analysis', 0))

rootpath = '../../../..'
envGlobal = Environment(
        toolpath=[os.path.join(rootpath, 'scons-build-tools/site_tools')],
        buildroot=[rootpath + 'build/'],
        tools=['utils_buildformat'],
        variables=vars,
        BASEPATH=os.path.abspath('.'),
        ENV=os.environ)
Help(vars.GenerateHelpText(envGlobal))

buildfolder = 'build'
if envGlobal['coverage']:
    envGlobal.Tool('compiler_hosted_gcc_coverage')
    envGlobal.Tool('settings_buildpath')
    envGlobal['BUILDPATH'] = os.path.abspath(os.path.join(buildfolder, 'test/coverage'))
else:
    envGlobal.Tool('compiler_hosted_llvm')
    envGlobal.Tool('settings_buildpath')
    envGlobal['BUILDPATH'] = os.path.abspath(os.path.join(buildfolder, 'test/unittest'))

envGlobal['CCACHE_BASEDIR'] = envGlobal['BUILDPATH']
envGlobal['CXX_bak'] = envGlobal['CXX']
envGlobal['CXX'] = "ccache $CXX_bak"

envGlobal.Append(CPPPATH=['src', 'ext'])
envGlobal.Append(LIBS=['rt', 'pthread', 'dl'])
envGlobal.Append(CPPDEFINES=['LUA_USE_LINUX'])

env = envGlobal.Clone()

objects = []

files = env.Glob('src/*.cpp')
files += env.Glob('src/*/*.cpp')
files += env.Glob('src/*/*/*.cpp')
files += env.Glob('src/*/*/*/*.cpp')
files += env.Glob('src/*/*/*/*/*.cpp')

# Build Lua
env = envGlobal.Clone()
env.RemoveFromList('CCFLAGS_warning', [
    '-Wcast-align'])
env.Append(CCFLAGS_warning=['-Wno-cast-qual'])

for file in env.Glob('ext/lua/*.c'):
    objects.append(env.Object(file))

# Build the test files
env = envGlobal.Clone()
env.Append(CPPPATH=[
    'test',
    'ext/rapidcheck/include',
    'ext/rapidcheck/extras/gmock/include/',
    'ext/rapidcheck/extras/gtest/include/'
])

# Remove warnings triggered by googletest
env.RemoveFromList('CCFLAGS_warning', [
    '-Wconversion',
    '-Wundef',
    '-Wmissing-declarations'])
env.RemoveFromList('CXXFLAGS_warning', '-Wold-style-cast')

# Build googletest
files += env.Glob('ext/*.cc')

# Build rapidcheck
files += env.Glob('ext/rapidcheck/src/*.cpp')
files += env.Glob('ext/rapidcheck/src/*/*.cpp')
files += env.Glob('ext/rapidcheck/src/*/*/*.cpp')

files += env.Glob('test/*.cpp')
files += env.Glob('test/*/*.cpp')
files += env.Glob('test/*/*/*.cpp')
files += env.Glob('test/*/*/*/*.cpp')
files += env.Glob('test/*/*/*/*/*.cpp')

envGlobal.Alias('build', env.Program('runner', objects + files))
envGlobal.Default('build')
